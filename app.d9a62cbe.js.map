{"version":3,"sources":["js/vue.js","js/model.js","js/controler.js","js/app.js"],"names":["Vue","data","choices","id","score","content","factors","document","querySelector","querySelectorAll","cell","cloneNode","factorCell","cloneCell","dataset","factorid","lastFactorId","firstElementChild","innerHTML","choiceCell","choiceid","lastChoiceId","cellRate","cellScore","newRow","createNewDOMELement","appendChild","createFactorCell","filter","c","visible","forEach","choice","createRateCell","tbody","lastRow","insertBefore","createNewRow","length","lastTdColumn","getElementById","addTdColumn","getSecondRow","lastElementChild","factorRow","getElementsByClassName","getFirstRow","createScoreCell","createChoiceCell","factorRowLength","i","visibleFactors","f","row","parentNode","remove","column","columns","columnsLength","value","e","a","isNaN","target","textContent","el","focus","window","getSelection","selectAllChildren","choiceContent","resultfield","cleanChoiceContent","replace","innerText","tag","classes","newDOMELement","createElement","undefined","setAttribute","Data","rate","factorsRate","choiceId","find","factor","factorId","ChoiceId","result","high","reduce","prev","current","push","fid","cid","scor","l","r","Controler","wrapper","vue","incrementLastFactorId","setFactor","setFactorRate","insertNewRow","incrementLastChoiceId","setChoice","insertNewColumn","typeOfElement","setFactorInvisible","parseInt","deleteRow","setChoiceInvisible","deleteColumn","trim","factorIdFromTarget","ChoiceIdFromTarget","setRate","incrementRate","setScore","updateScore","getBestChoice","map","join","renderBestChoice","getInitTemplate","setFocus","addEventListener","hasAttribute","updateBestChoice","addChoice","addFactor","classList","contains","deleteElement","updateElementContent","Table","console","log","main","controler","initRender","listenClickEvents","myTable"],"mappings":";AA6QG,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EA7QUA,IAAAA,EAAAA,WA6QV,SAAA,IAAA,EAAA,KAAA,GAAA,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,kBA5QgBC,MAAAA,SAAAA,GAM0BA,MAAAA,8IAAAA,OAAAA,EAAKC,QAAQ,GAAGC,GACnBF,gDAAAA,OAAAA,EAAKC,QAAQ,GAAGE,MAO3BH,qKAAAA,OAAAA,EAAKC,QAAQ,GAAGC,GAIhCF,oJAAAA,OAAAA,EAAKC,QAAQ,GAAGG,QAWAJ,+UAAAA,OAAAA,EAAKK,QAAQ,GAAGH,GAK/BF,mKAAAA,OAAAA,EAAKK,QAAQ,GAAGD,QAIYJ,uJAAAA,OAAAA,EAAKC,QAAQ,GAAGC,GAAsBF,qBAAAA,OAAAA,EAAKK,QAAQ,GAAGH,GArC9F,0TA2QD,CAAA,IAAA,cAjNc,MAAA,WACNI,OAAAA,SAASC,cAAc,QAgN/B,CAAA,IAAA,eA1Me,MAAA,WACPD,OAAAA,SAASE,iBAAiB,MAAM,KAyMxC,CAAA,IAAA,cAnMc,MAAA,WACNF,OAAAA,SAASE,iBAAiB,MAAM,KAkMxC,CAAA,IAAA,YA5LUC,MAAAA,SAAAA,GACFA,OAAAA,EAAKC,WAAU,KA2LvB,CAAA,IAAA,mBAxLiBV,MAAAA,SAAAA,GACVW,IAAAA,EAAa,KAAKC,UACtBN,SAASC,cAAc,iCAIlBI,OAFPA,EAAWE,QAAQC,SAAWd,EAAKe,aACnCJ,EAAWK,kBAAkBC,UAAuBjB,WAAAA,OAAAA,EAAKe,cAClDJ,IAkLR,CAAA,IAAA,mBA/KiBX,MAAAA,SAAAA,GACVkB,IAAAA,EAAa,KAAKN,UACtBN,SAASC,cAAc,oCAKlBW,OAFPA,EAAWL,QAAQM,SAAWnB,EAAKoB,aACnCF,EAAWF,kBAAkBC,UAAqBjB,SAAAA,OAAAA,EAAKoB,cAChDF,IAwKR,CAAA,IAAA,iBArKiB,MAAA,WACVG,IAAAA,EAAW,KAAKT,UACpBN,SAASC,cAAc,2CAGlBc,OADPA,EAASJ,UAAY,IACdI,IAgKR,CAAA,IAAA,kBA7JgBrB,MAAAA,SAAAA,GACTsB,IAAAA,EAAY,KAAKV,UACrBN,SAASC,cAAc,8BAKlBe,OAHPA,EAAUT,QAAQM,SAAWnB,EAAKoB,aAElCE,EAAUN,kBAAkBC,UAAY,IACjCK,IAsJR,CAAA,IAAA,eAhJatB,MAAAA,SAAAA,GAAM,IAAA,EAAA,KACZuB,EAAS,KAAKC,oBAAoB,KAAM,aAavCD,OAZPA,EAAOE,YAAY,KAAKC,iBAAiB1B,IAGzCA,EAAKC,QACF0B,OAAO,SAACC,GAAMA,OAAc,IAAdA,EAAEC,UAChBC,QAAQ,SAACC,GACFtB,IAAAA,EAAO,EAAKuB,iBAClBvB,EAAKI,QAAQM,SAAWY,EAAO7B,GAC/BO,EAAKI,QAAQC,SAAWd,EAAKe,aAC7BQ,EAAOE,YAAYhB,KAGhBc,IAkIR,CAAA,IAAA,eA5HavB,MAAAA,SAAAA,GACNiC,IAAAA,EAAQ3B,SAASC,cAAc,SAC/B2B,EAAU5B,SAASE,iBAAiB,MAE1CyB,EAAME,aACJ,KAAKC,aAAapC,GAClBkC,EAAQA,EAAQG,OAAS,MAsH5B,CAAA,IAAA,kBA/GgBrC,MAAAA,SAAAA,GACTsC,IAAAA,EAAehC,SAASiC,eAAe,gBACvCC,EAAc,KAAKC,eAAeC,iBAClCC,EAAYrC,SAASsC,uBAAuB,aAG/CC,KAAAA,cACAV,aAAa,KAAKW,gBAAgB9C,GAAOsC,GAEzCG,KAAAA,eACAN,aAAa,KAAKY,iBAAiB/C,GAAOwC,GAGxC,IADCQ,IAAAA,EAAkBL,EAAUN,OACzBY,EAAI,EAAGA,EAAID,EAAiBC,IAAK,CAClCC,IAAAA,EAAiBlD,EAAKK,QAAQsB,OAClC,SAACwB,GAAMA,OAAc,IAAdA,EAAEtB,UAGLpB,EAAO,KAAKuB,iBAClBvB,EAAKI,QAAQM,SAAWnB,EAAKoB,aAC7BX,EAAKI,QAAQC,SAAWoC,EAAeD,GAAG/C,GAC1CyC,EAAUM,GAAGxB,YAAYhB,MA0F5B,CAAA,IAAA,YAnFU2C,MAAAA,SAAAA,GACL9C,SAASE,iBAAiB,gBAAgB6B,OAAS,GACrDe,EAAIC,WAAWC,WAiFlB,CAAA,IAAA,eA1EaC,MAAAA,SAAAA,GACRjD,GAAAA,SAASE,iBAAiB,aAAa6B,OAAS,EAK7C,IAJCmB,IAAAA,EAAUlD,SAASE,iBACM+C,qBAAAA,OAAAA,EAD/B,OAGME,EAAgBD,EAAQnB,OACrBY,EAAI,EAAGA,EAAIQ,EAAeR,IACjCO,EAAQP,GAAGK,WAmEhB,CAAA,IAAA,cA3DYpD,MAAAA,SAAAA,EAAIC,GACTmB,IAAAA,EAAYhB,SAASC,cACML,yBAAAA,OAAAA,EADjC,OAGAoB,EAAUN,kBAAkBC,UAAYd,EACxCmB,EAAUoB,iBAAiBgB,MAAQvD,IAsDpC,CAAA,IAAA,gBAnDcwD,MAAAA,SAAAA,GACTC,IAAAA,EAAIC,MAAMF,EAAEG,OAAOC,aAAe,EAAIJ,EAAEG,OAAOC,YAO5CH,OANHA,EAAI,EACNA,IAEAA,EAAI,EAEND,EAAEG,OAAO7C,UAAY2C,EACdA,IA2CR,CAAA,IAAA,WAxCSI,MAAAA,SAAAA,GACRA,EAAGC,QACHC,OAAOC,eAAeC,kBAAkBJ,KAsCzC,CAAA,IAAA,mBAhCiBK,MAAAA,SAAAA,GACVC,IAAAA,EAAchE,SAASiC,eAAe,eAEtCgC,EAAqBF,EAAcG,QAAQ,YAAa,IAE9DF,EAAYG,UAAoCF,wBAAAA,OAAAA,KA2BjD,CAAA,IAAA,sBAhBkE,MAAA,WAA9CG,IAAAA,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,MAAOC,EAAiC,UAAA,OAAA,EAAA,UAAA,QAAA,EAAxBzE,EAAwB,UAAA,OAAA,EAAA,UAAA,QAAA,EAApBiB,EAAoB,UAAA,OAAA,EAAA,UAAA,QAAA,EAAVL,EAAU,UAAA,OAAA,EAAA,UAAA,QAAA,EAC3D8D,EAAgBtE,SAASuE,cAAcH,GActCE,YAbSE,IAAZH,GACFC,EAAcG,aAAa,QAASJ,QAE3BG,IAAP5E,GACF0E,EAAcG,aAAa,KAAM7E,QAElB4E,IAAb3D,IACFyD,EAAc/D,QAAQM,SAAWA,QAElB2D,IAAbhE,IACF8D,EAAc/D,QAAQC,SAAWA,GAG5B8D,MACR,EA7QU7E,GA6QV,QAAA,IAAA;;AC/EA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,EA9LUiF,IAAAA,EAAAA,WACI,SAAA,IAAA,EAAA,KAAA,GACR5D,KAAAA,aAAe,EACfL,KAAAA,aAAe,EACfd,KAAAA,QAAU,CACb,CACEC,GAAI,EACJE,QAAS,wBACTD,MAAO,EACP0B,SAAS,IAIRxB,KAAAA,QAAU,CACb,CACEH,GAAI,EACJE,QAAS,WACT6E,KAAM,EACNpD,SAAS,EAETqD,YAAa,CACX,CACEC,SAAU,EACVF,KAAM,MAuKf,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,YA7JU/E,MAAAA,SAAAA,GACF,OAAA,KAAKD,QAAQmF,KAAK,SAACrD,GAAWA,OAAAA,EAAO7B,KAAOA,MA4JpD,CAAA,IAAA,gBArJgB,MAAA,WACR,OAAA,KAAKD,UAoJb,CAAA,IAAA,YA9IUC,MAAAA,SAAAA,GACF,OAAA,KAAKG,QAAQ+E,KAAK,SAACC,GAAWA,OAAAA,EAAOnF,KAAOA,MA6IpD,CAAA,IAAA,gBAtIgB,MAAA,WACR,OAAA,KAAKG,UAqIb,CAAA,IAAA,gBAlIciF,MAAAA,SAAAA,EAAUC,GACnBC,IAAAA,EAQGA,OAPFnF,KAAAA,QAAQyB,QAAQ,SAACuD,GACpBA,EAAOH,YAAYpD,QAAQ,SAACmD,GACtBI,EAAOnF,KAAOoF,GAAYL,EAAKE,WAAaI,IAC9CC,EAASP,OAIRO,IAyHR,CAAA,IAAA,gBAnHgB,MAAA,WACTC,IAAAA,EAAO,KAAKxF,QACf0B,OAAO,SAACC,GAAMA,OAAc,IAAdA,EAAEC,UAChB6D,OAAO,SAACC,EAAMC,GACbD,OAAAA,EAAKxF,MAAQyF,EAAQzF,MAAQwF,EAAOC,IAGjC,OAAA,KAAK3F,QAAQ0B,OAAO,SAACC,GAAMA,OAAAA,EAAEzB,QAAUsF,EAAKtF,UA4GpD,CAAA,IAAA,YArGU4B,MAAAA,SAAAA,GACJ9B,KAAAA,QAAQ4F,KAAK9D,KAoGnB,CAAA,IAAA,YA7FUsD,MAAAA,SAAAA,GACJhF,KAAAA,QAAQwF,KAAKR,KA4FnB,CAAA,IAAA,gBAnFcS,MAAAA,SAAAA,EAAKC,EAAKd,GAClB5E,KAAAA,QAAQyB,QAAQ,SAACuD,GAChBA,EAAOnF,KAAO4F,GAChBT,EAAOH,YAAYW,KAAK,CACtBV,SAAUY,EACVd,KAAMA,QA8Eb,CAAA,IAAA,UAxEQa,MAAAA,SAAAA,EAAKC,EAAKC,GACZ3F,KAAAA,QAAQyB,QAAQ,SAACuD,GAChBA,EAAOnF,KAAO4F,GAChBT,EAAOH,YAAYpD,QAAQ,SAACmD,GACtBA,EAAKE,WAAaY,IACpBd,EAAKA,KAAOe,SAmErB,CAAA,IAAA,mBAzDiB9F,MAAAA,SAAAA,GACXG,KAAAA,QAAQyB,QAAQ,SAACuD,GAChBA,EAAOnF,KAAOA,IAAyB,IAAnBmF,EAAOxD,UAC7BwD,EAAOxD,SAAU,OAsDtB,CAAA,IAAA,qBA9CmB3B,MAAAA,SAAAA,GACbG,KAAAA,QAAQyB,QAAQ,SAACuD,GAChBA,EAAOnF,KAAOA,IAAyB,IAAnBmF,EAAOxD,UAC7BwD,EAAOxD,SAAU,OA2CtB,CAAA,IAAA,mBAnCiB3B,MAAAA,SAAAA,GACXD,KAAAA,QAAQ6B,QAAQ,SAACC,GAChBA,EAAO7B,KAAOA,IAAyB,IAAnB6B,EAAOF,UAC7BE,EAAOF,SAAU,OAgCtB,CAAA,IAAA,qBAxBmB3B,MAAAA,SAAAA,GACbD,KAAAA,QAAQ6B,QAAQ,SAACC,GAChBA,EAAO7B,KAAOA,IAAyB,IAAnB6B,EAAOF,UAC7BE,EAAOF,SAAU,OAqBtB,CAAA,IAAA,WAbW,MAAA,WAAA,IAAA,EAAA,KACL5B,KAAAA,QAAQ6B,QAAQ,SAACF,GAChBqE,IAAAA,EAAI,EAER,EAAK5F,QAAQyB,QAAQ,SAACqB,GACpBA,EAAE+B,YAAYpD,QAAQ,SAACoE,GACjBA,EAAEf,WAAavD,EAAE1B,KACnB+F,GAAKC,EAAEjB,UAIbrD,EAAEzB,MAAQ8F,QAEb,EA9LUjB,GA8LV,QAAA,KAAA;;ACCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EA/LH,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,cA8LG,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA5LUmB,IAAAA,EAAAA,WACEC,SAAAA,EAAAA,GAAS,EAAA,KAAA,GACfA,KAAAA,QAAUA,EACVC,KAAAA,IAAM,IAAItG,EAAJ,IACNC,KAAAA,KAAO,IAAIgF,EAAJ,KAwLb,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,wBAjLwB,MAAA,WAChB,OAAA,KAAKhF,KAAKoB,iBAgLlB,CAAA,IAAA,wBAzKwB,MAAA,WAChB,OAAA,KAAKpB,KAAKe,iBAwKlB,CAAA,IAAA,YAlKY,MAAA,WAAA,IAAA,EAAA,KACNuF,KAAAA,wBAEAtG,KAAAA,KAAKuG,UAAU,CAClBrG,GAAI,KAAKF,KAAKe,aACdX,QAAmB,UAAA,OAAA,KAAKJ,KAAKe,cAC7BkE,KAAM,EACNpD,SAAS,EACTqD,YAAa,KAGK,KAAKlF,KAAKC,QAAQ0B,OAAO,SAACC,GAAMA,OAAc,IAAdA,EAAEC,UAE1CC,QAAQ,SAACF,GACnB,EAAK5B,KAAKwG,cAAc,EAAKxG,KAAKe,aAAca,EAAE1B,GAAI,KAGnDmG,KAAAA,IAAII,aAAa,KAAKzG,QAiJ5B,CAAA,IAAA,YA3IY,MAAA,WAAA,IAAA,EAAA,KACN0G,KAAAA,wBAEA1G,KAAAA,KAAK2G,UAAU,CAClBzG,GAAI,KAAKF,KAAKoB,aACdhB,QAAkB,SAAA,OAAA,KAAKJ,KAAKoB,cAC5BjB,MAAO,EACP0B,SAAS,IAGN7B,KAAAA,KAAKK,QACPsB,OAAO,SAACwB,GAAMA,OAAc,IAAdA,EAAEtB,UAChBC,QAAQ,SAACuD,GACR,OAAA,EAAKrF,KAAKwG,cAAcnB,EAAOnF,GAAI,EAAKF,KAAKoB,aAAc,KAG1DiF,KAAAA,IAAIO,gBAAgB,KAAK5G,QA2H/B,CAAA,IAAA,gBAlHc6G,MAAAA,SAAAA,EAAe7C,GACpB6C,OAAAA,GACD,IAAA,SACE7G,KAAAA,KAAK8G,mBAAmBC,SAAS/C,EAAGnD,QAAQC,WAC5CuF,KAAAA,IAAIW,UAAUhD,GACnB,MACG,IAAA,SACEhE,KAAAA,KAAKiH,mBAAmBF,SAAS/C,EAAGnD,QAAQM,WAC5CkF,KAAAA,IAAIa,aAAalD,EAAGnD,QAAQM,aA0GtC,CAAA,IAAA,uBA/FqB0F,MAAAA,SAAAA,EAAelD,GAC3BkD,OAAAA,GACD,IAAA,SACE7G,KAAAA,KAAKK,QACRsD,EAAEG,OAAOT,WAAWxC,QAAQC,UAC5BV,QAAUuD,EAAEG,OAAOW,UAAU0C,OAC/B,MACG,IAAA,SACEnH,KAAAA,KAAKC,QACR0D,EAAEG,OAAOT,WAAWxC,QAAQM,UAC5Bf,QAAUuD,EAAEG,OAAOW,UAAU0C,UAqFpC,CAAA,IAAA,cA7EYxD,MAAAA,SAAAA,GAAG,IAAA,EAAA,KACRyD,EAAqBL,SAASpD,EAAEG,OAAOjD,QAAQC,UAC/CuG,EAAqBN,SAASpD,EAAEG,OAAOjD,QAAQM,UAChDnB,KAAAA,KAAKsH,QACRF,EACAC,EACA,KAAKhB,IAAIkB,cAAc5D,IAEpB3D,KAAAA,KAAKwH,WAELxH,KAAAA,KAAKC,QAAQ6B,QAAQ,SAACF,GACrBA,EAAE1B,KAAOmH,GACX,EAAKhB,IAAIoB,YAAYJ,EAAoBzF,EAAEzB,WAiEhD,CAAA,IAAA,mBAzDmB,MAAA,WACZC,IAAAA,EAAU,KAAKJ,KAClB0H,gBACAC,IAAI,SAAC/F,GAAMA,OAAAA,EAAExB,UACbwH,KAAK,OAEHvB,KAAAA,IAAIwB,iBAAiBzH,KAmD3B,CAAA,IAAA,aA3CWgG,MAAAA,SAAAA,GACVA,EAAQnF,UAAY,KAAKoF,IAAIyB,gBAAgB,KAAK9H,MAC7CqG,KAAAA,IAAI0B,SAASzH,SAASC,cAAc,sBAyC1C,CAAA,IAAA,oBAnCkB6F,MAAAA,SAAAA,GAAS,IAAA,EAAA,KAC1BA,EAAQ4B,iBACN,QACA,SAACrE,GAEGA,EAAEG,OAAOmE,aAAa,kBACtBtE,EAAEG,OAAOmE,aAAa,kBAEtB,EAAKR,YAAY9D,GACjB,EAAKuE,oBACIvE,EAAEG,SAAWxD,SAASiC,eAAe,iBAC9C,EAAK4F,YACIxE,EAAEG,SAAWxD,SAASiC,eAAe,iBAC9C,EAAK6F,YACIzE,EAAEG,OAAOuE,UAAUC,SAAS,mBACrC,EAAKC,cAAc,SAAU5E,EAAEG,OAAOT,YAC7BM,EAAEG,OAAOuE,UAAUC,SAAS,mBACrC,EAAKC,cAAc,SAAU5E,EAAEG,OAAOT,aAEtCM,EAAEG,OAAOuE,UAAUC,SAAS,mBAC5B3E,EAAEG,OAAOuE,UAAUC,SAAS,oBAE5B3E,EAAEG,OAAOkE,iBAAiB,QAAS,WAC7BrE,EAAEG,OAAOT,WAAWxC,QAAQC,UAC9B,EAAK0H,qBAAqB,SAAU7E,GACpC,EAAKuE,oBACIvE,EAAEG,OAAOT,WAAWxC,QAAQM,WACrC,EAAKqH,qBAAqB,SAAU7E,GACpC,EAAKuE,wBAKb,OAEH,EA5LU/B,GA4LV,QAAA,UAAA;;AC/JH,aAhCA,IAAA,EAAA,QAAA,kBAgCA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA1BMsC,IAAAA,EAAAA,WACqB,SAAA,IAAZzE,IAAAA,EAAK,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,MAAO,EAAA,KAAA,GACL,iBAAPA,GACJA,KAAAA,GAAK,MACV0E,QAAQC,IAAI,mCAEP3E,KAAAA,GAAKA,EAGP4E,KAAAA,OAiBT,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAdU,MAAA,WACDxC,KAAAA,QAAU9F,SAASiC,eAAe,KAAKyB,IAEvC6E,KAAAA,UAAY,IAAI1C,EAAJ,UAAc,KAAKC,SAC/ByC,KAAAA,UAAUC,WAAW,KAAK1C,SAE1ByC,KAAAA,UAAUE,kBAAkB,KAAK3C,aAQ1C,EA1BMqC,GA0BAO,EAAU,IAAIP,EAAM","file":"app.d9a62cbe.js","sourceRoot":"../src","sourcesContent":["export class Vue {\n  getInitTemplate (data) {\n    return `\n    <table class=\"table table-responsive\">\n      <tbody>\n        <tr>\n          <td></td>\n          <td class=\"score\" data-choiceid=\"${data.choices[0].id}\">\n            <div class=\"score__content\">${data.choices[0].score}</div>\n\n          </td>\n          <td id=\"lastscorecol\" class=\"add-col\"></td>\n        </tr>\n        <tr>\n          <td></td>\n          <td data-choiceid=\"${data.choices[0].id}\"  class=\"choice cell\">\n            <div\n              class=\"choice-content text-center\"\n              contenteditable=\"true\"\n            >${data.choices[0].content}\n            </div>\n            <span class=\"choice-btn__del btn-del\">Enlever</span>\n          </td>\n          <td class=\"addCell-choice add-col cell\">\n            <div id=\"addChoice-btn\">\n              Ajouter\n            </div>\n          </td>\n        </tr>\n        <tr class=\"factorRow\">\n          <td data-factorid=\"${data.factors[0].id}\" class=\"factor cell\">\n            <div\n              class=\"factor-content text-center\"\n              contenteditable=\"true\"\n            >\n              ${data.factors[0].content}\n            </div>\n            <span class=\"factor-btn__del btn-del\">Enlever</span>\n          </td>\n          <td class=\"rate\" data-choiceid=\"${data.choices[0].id}\" data-factorid=\"${data.factors[0].id}\">\n          -\n          </td>\n        </tr>\n        <tr>\n          <td class=\"addCell-factor cell text-center\">\n            <div id=\"addFactor-btn\">\n              Ajouter\n            </div>\n          </td>\n          <td></td>\n          <td></td>\n        </tr>\n      </tbody>\n    </table>\n    `\n  }\n\n  /**\n       * @returns {HTMLElement}\n       */\n  getFirstRow () {\n    return document.querySelector('tr')\n  }\n\n  /**\n       * @returns {HTMLElement}\n       */\n  getSecondRow () {\n    return document.querySelectorAll('tr')[1]\n  }\n\n  /**\n       * @returns {HTMLElement}\n       */\n  getThirdRow () {\n    return document.querySelectorAll('tr')[2]\n  }\n\n  /**\n       * @returns {Node}\n       */\n  cloneCell (cell) {\n    return cell.cloneNode(true)\n  }\n\n  createFactorCell (data) {\n    const factorCell = this.cloneCell(\n      document.querySelector(\"td.factor[data-factorid='0']\")\n    )\n    factorCell.dataset.factorid = data.lastFactorId\n    factorCell.firstElementChild.innerHTML = `Facteur ${data.lastFactorId}`\n    return factorCell\n  }\n\n  createChoiceCell (data) {\n    const choiceCell = this.cloneCell(\n      document.querySelector(\".choice.cell[data-choiceid='0']\")\n    )\n\n    choiceCell.dataset.choiceid = data.lastChoiceId\n    choiceCell.firstElementChild.innerHTML = `Choix ${data.lastChoiceId}`\n    return choiceCell\n  }\n\n  createRateCell () {\n    const cellRate = this.cloneCell(\n      document.querySelector(\"[data-choiceid='0'][data-factorid='0']\")\n    )\n    cellRate.innerHTML = '-'\n    return cellRate\n  }\n\n  createScoreCell (data) {\n    const cellScore = this.cloneCell(\n      document.querySelector(\".score[data-choiceid='0']\")\n    )\n    cellScore.dataset.choiceid = data.lastChoiceId\n\n    cellScore.firstElementChild.innerHTML = '0'\n    return cellScore\n  }\n\n  /**\n       * @returns {HTMLCollection}\n       */\n  createNewRow (data) {\n    const newRow = this.createNewDOMELement('tr', 'factorRow')\n    newRow.appendChild(this.createFactorCell(data))\n\n    // TODO fix the count of choices\n    data.choices\n      .filter((c) => c.visible === true)\n      .forEach((choice) => {\n        const cell = this.createRateCell()\n        cell.dataset.choiceid = choice.id\n        cell.dataset.factorid = data.lastFactorId\n        newRow.appendChild(cell)\n      })\n\n    return newRow\n  }\n\n  /**\n       * @returns {VoidFunction}\n       */\n  insertNewRow (data) {\n    const tbody = document.querySelector('tbody')\n    const lastRow = document.querySelectorAll('tr')\n\n    tbody.insertBefore(\n      this.createNewRow(data),\n      lastRow[lastRow.length - 1]\n    )\n  }\n\n  /**\n       * @returns {VoidFunction}\n       */\n  insertNewColumn (data) {\n    const lastTdColumn = document.getElementById('lastscorecol')\n    const addTdColumn = this.getSecondRow().lastElementChild\n    const factorRow = document.getElementsByClassName('factorRow')\n\n    this\n      .getFirstRow()\n      .insertBefore(this.createScoreCell(data), lastTdColumn)\n    this\n      .getSecondRow()\n      .insertBefore(this.createChoiceCell(data), addTdColumn)\n\n    const factorRowLength = factorRow.length\n    for (let i = 0; i < factorRowLength; i++) {\n      const visibleFactors = data.factors.filter(\n        (f) => f.visible === true\n      )\n\n      const cell = this.createRateCell()\n      cell.dataset.choiceid = data.lastChoiceId\n      cell.dataset.factorid = visibleFactors[i].id\n      factorRow[i].appendChild(cell)\n    }\n  }\n\n  /**\n       * @returns {VoidFunction}\n       */\n  deleteRow (row) {\n    if (document.querySelectorAll('tr.factorRow').length > 1) {\n      row.parentNode.remove()\n    }\n  }\n\n  /**\n       * @returns {VoidFunction}\n       */\n  deleteColumn (column) {\n    if (document.querySelectorAll('td.choice').length > 1) {\n      const columns = document.querySelectorAll(\n                `td[data-choiceid='${column}']`\n      )\n      const columnsLength = columns.length\n      for (let i = 0; i < columnsLength; i++) {\n        columns[i].remove()\n      }\n    }\n  }\n\n  /**\n       * @returns {VoidFunction}\n       */\n  updateScore (id, score) {\n    const cellScore = document.querySelector(\n            `.score[data-choiceid='${id}']`\n    )\n    cellScore.firstElementChild.innerHTML = score\n    cellScore.lastElementChild.value = score\n  }\n\n  incrementRate (e) {\n    let a = isNaN(e.target.textContent) ? 0 : e.target.textContent\n    if (a < 3) {\n      a++\n    } else {\n      a = 0\n    }\n    e.target.innerHTML = a\n    return a\n  }\n\n  setFocus (el) {\n    el.focus()\n    window.getSelection().selectAllChildren(el)\n  }\n\n  /**\n       * @param {String} choiceContent\n       */\n  renderBestChoice (choiceContent) {\n    const resultfield = document.getElementById('best-choice')\n\n    const cleanChoiceContent = choiceContent.replace(/\\r?\\n|\\r/g, '')\n\n    resultfield.innerText = `The best choice is : ${cleanChoiceContent}`\n  }\n\n  /**\n       * Set new HTML Element with main properties\n       * @param {string} tag\n       * @param {string} classes\n       * @param {string} id\n       * @param {string} choiceid\n       * @param {string} factorid\n       */\n  createNewDOMELement (tag = 'div', classes, id, choiceid, factorid) {\n    const newDOMELement = document.createElement(tag)\n    if (classes !== undefined) {\n      newDOMELement.setAttribute('class', classes)\n    }\n    if (id !== undefined) {\n      newDOMELement.setAttribute('id', id)\n    }\n    if (choiceid !== undefined) {\n      newDOMELement.dataset.choiceid = choiceid\n    }\n    if (factorid !== undefined) {\n      newDOMELement.dataset.factorid = factorid\n    }\n\n    return newDOMELement\n  }\n}\n","export class Data {\n  constructor () {\n    this.lastChoiceId = 0\n    this.lastFactorId = 0\n    this.choices = [\n      {\n        id: 0,\n        content: 'Edit here your choice',\n        score: 0,\n        visible: true\n      }\n    ]\n\n    this.factors = [\n      {\n        id: 0,\n        content: 'Factor 0',\n        rate: 0,\n        visible: true,\n\n        factorsRate: [\n          {\n            choiceId: 0,\n            rate: 0\n          }\n        ]\n      }\n    ]\n  }\n\n  /**\n       * @returns {Object}\n       */\n  getChoice (id) {\n    return this.choices.find((choice) => choice.id === id)\n  }\n\n  /**\n       * return all choices\n       * @returns {Array}\n       */\n  getAllChoices () {\n    return this.choices\n  }\n\n  /**\n       * @returns {Object}\n       */\n  getFactor (id) {\n    return this.factors.find((factor) => factor.id === id)\n  }\n\n  /**\n       * return all factors\n       * @returns {Array}\n       */\n  getAllFactors () {\n    return this.factors\n  }\n\n  getFactorRate (factorId, ChoiceId) {\n    let result\n    this.factors.forEach((factor) => {\n      factor.factorsRate.forEach((rate) => {\n        if (factor.id === factorId && rate.choiceId === ChoiceId) {\n          result = rate\n        }\n      })\n    })\n    return result\n  }\n\n  /**\n       *  @returns {Array}\n       */\n  getBestChoice () {\n    const high = this.choices\n      .filter((c) => c.visible === true)\n      .reduce((prev, current) =>\n        prev.score > current.score ? prev : current\n      )\n\n    return this.choices.filter((c) => c.score === high.score)\n  }\n\n  /**\n       * set a new choice\n       * @param {Object} choice\n       */\n  setChoice (choice) {\n    this.choices.push(choice)\n  }\n\n  /**\n       * set a new factor\n       * @param {Object} factor\n       */\n  setFactor (factor) {\n    this.factors.push(factor)\n  }\n\n  /**\n       * set new factor rate\n       * @param {Object} factorRate\n       *\n       * TODO : just set rate if object already exist\n       */\n  setFactorRate (fid, cid, rate) {\n    this.factors.forEach((factor) => {\n      if (factor.id === fid) {\n        factor.factorsRate.push({\n          choiceId: cid,\n          rate: rate\n        })\n      }\n    })\n  }\n\n  setRate (fid, cid, scor) {\n    this.factors.forEach((factor) => {\n      if (factor.id === fid) {\n        factor.factorsRate.forEach((rate) => {\n          if (rate.choiceId === cid) {\n            rate.rate = scor\n          }\n        })\n      }\n    })\n  }\n\n  /**\n       * @returns {VoidFunction}\n       */\n  setFactorVisible (id) {\n    this.factors.forEach((factor) => {\n      if (factor.id === id && factor.visible === false) {\n        factor.visible = true\n      }\n    })\n  }\n\n  /**\n       * @returns {VoidFunction}\n       */\n  setFactorInvisible (id) {\n    this.factors.forEach((factor) => {\n      if (factor.id === id && factor.visible === true) {\n        factor.visible = false\n      }\n    })\n  }\n\n  /**\n       * @returns {VoidFunction}\n       */\n  setChoiceVisible (id) {\n    this.choices.forEach((choice) => {\n      if (choice.id === id && choice.visible === false) {\n        choice.visible = true\n      }\n    })\n  }\n\n  /**\n       * @returns {VoidFunction}\n       */\n  setChoiceInvisible (id) {\n    this.choices.forEach((choice) => {\n      if (choice.id === id && choice.visible === true) {\n        choice.visible = false\n      }\n    })\n  }\n\n  /**\n       * @returns {VoidFunction}\n       */\n  setScore () {\n    this.choices.forEach((c) => {\n      let l = 0\n\n      this.factors.forEach((f) => {\n        f.factorsRate.forEach((r) => {\n          if (r.choiceId === c.id) {\n            l += r.rate\n          }\n        })\n      })\n      c.score = l\n    })\n  }\n}\n","import { Vue } from './vue.js'\nimport { Data } from './model.js'\n\nexport class Controler {\n  constructor (wrapper) {\n    this.wrapper = wrapper\n    this.vue = new Vue()\n    this.data = new Data()\n  }\n\n  /**\n       * Return and increment a new choice id\n       * @returns {Number}\n       */\n  incrementLastChoiceId () {\n    return this.data.lastChoiceId++\n  }\n\n  /**\n       * Return and increment a new factor id\n       * @returns {Number}\n       */\n  incrementLastFactorId () {\n    return this.data.lastFactorId++\n  }\n\n  /**\n   * @returns {VoidFunction}\n   */\n  addFactor () {\n    this.incrementLastFactorId()\n\n    this.data.setFactor({\n      id: this.data.lastFactorId,\n      content: `Factor ${this.data.lastFactorId}`,\n      rate: 0,\n      visible: true,\n      factorsRate: []\n    })\n\n    const sortChoices = this.data.choices.filter((c) => c.visible === true)\n\n    sortChoices.forEach((c) => {\n      this.data.setFactorRate(this.data.lastFactorId, c.id, 0)\n    })\n\n    this.vue.insertNewRow(this.data)\n  }\n\n  /**\n   * @returns {VoidFunction}\n   */\n  addChoice () {\n    this.incrementLastChoiceId()\n\n    this.data.setChoice({\n      id: this.data.lastChoiceId,\n      content: `Choix ${this.data.lastChoiceId}`,\n      score: 0,\n      visible: true\n    })\n\n    this.data.factors\n      .filter((f) => f.visible === true)\n      .forEach((factor) =>\n        this.data.setFactorRate(factor.id, this.data.lastChoiceId, 0)\n      )\n\n    this.vue.insertNewColumn(this.data)\n  }\n\n  /**\n   *\n   * @param {String} typeOfElement\n   * @param {HTMLElement} el\n   * @returns {VoidFunction}\n   */\n  deleteElement (typeOfElement, el) {\n    switch (typeOfElement) {\n      case 'factor':\n        this.data.setFactorInvisible(parseInt(el.dataset.factorid))\n        this.vue.deleteRow(el)\n        break\n      case 'choice':\n        this.data.setChoiceInvisible(parseInt(el.dataset.choiceid))\n        this.vue.deleteColumn(el.dataset.choiceid)\n        break\n    }\n  }\n\n  /**\n   *\n   * @param {String} typeOfElement\n   * @param {Object} e\n   * @returns {VoidFunction}\n   */\n  updateElementContent (typeOfElement, e) {\n    switch (typeOfElement) {\n      case 'factor':\n        this.data.factors[\n          e.target.parentNode.dataset.factorid\n        ].content = e.target.innerText.trim()\n        break\n      case 'choice':\n        this.data.choices[\n          e.target.parentNode.dataset.choiceid\n        ].content = e.target.innerText.trim()\n        break\n    }\n  }\n\n  /**\n   * @returns {VoidFunction}\n   */\n  updateScore (e) {\n    const factorIdFromTarget = parseInt(e.target.dataset.factorid)\n    const ChoiceIdFromTarget = parseInt(e.target.dataset.choiceid)\n    this.data.setRate(\n      factorIdFromTarget,\n      ChoiceIdFromTarget,\n      this.vue.incrementRate(e)\n    )\n    this.data.setScore()\n\n    this.data.choices.forEach((c) => {\n      if (c.id === ChoiceIdFromTarget) {\n        this.vue.updateScore(ChoiceIdFromTarget, c.score)\n      }\n    })\n  }\n\n  /**\n   * @returns {VoidFunction}\n   */\n  updateBestChoice () {\n    const content = this.data\n      .getBestChoice()\n      .map((c) => c.content)\n      .join(' / ')\n\n    this.vue.renderBestChoice(content)\n  }\n\n  /**\n   * Insert the initial template inside wrapper elements\n   * @param {HTMLElement} wrapper\n   * @returns {VoidFunction}\n   */\n  initRender (wrapper) {\n    wrapper.innerHTML = this.vue.getInitTemplate(this.data)\n    this.vue.setFocus(document.querySelector('.choice-content'))\n  }\n\n  /**\n   * @returns {VoidFunction}\n   */\n  listenClickEvents (wrapper) {\n    wrapper.addEventListener(\n      'click',\n      (e) => {\n        if (\n          e.target.hasAttribute('data-choiceid') &&\n          e.target.hasAttribute('data-factorid')\n        ) {\n          this.updateScore(e)\n          this.updateBestChoice()\n        } else if (e.target === document.getElementById('addChoice-btn')) {\n          this.addChoice()\n        } else if (e.target === document.getElementById('addFactor-btn')) {\n          this.addFactor()\n        } else if (e.target.classList.contains('factor-btn__del')) {\n          this.deleteElement('factor', e.target.parentNode)\n        } else if (e.target.classList.contains('choice-btn__del')) {\n          this.deleteElement('choice', e.target.parentNode)\n        } else if (\n          e.target.classList.contains('factor-content') ||\n          e.target.classList.contains('choice-content')\n        ) {\n          e.target.addEventListener('input', () => {\n            if (e.target.parentNode.dataset.factorid) {\n              this.updateElementContent('factor', e)\n              this.updateBestChoice()\n            } else if (e.target.parentNode.dataset.choiceid) {\n              this.updateElementContent('choice', e)\n              this.updateBestChoice()\n            }\n          })\n        }\n      },\n      true\n    )\n  }\n}\n","import { Controler } from './controler.js'\n\n/**\n * Represent table to construct the app\n * @param {string} el - wrapper DOM element where the table where build\n */\nclass Table {\n  constructor (el = 'app') {\n    if (typeof el !== 'string') {\n      this.el = 'app'\n      console.log('the app will build in #app div')\n    } else {\n      this.el = el\n    }\n\n    this.main()\n  }\n\n  main () {\n    this.wrapper = document.getElementById(this.el)\n\n    this.controler = new Controler(this.wrapper)\n    this.controler.initRender(this.wrapper)\n\n    this.controler.listenClickEvents(this.wrapper)\n  }\n}\n\n// ==============================================\n// ==============================================\n// Main program begin here\n\nconst myTable = new Table('app')\n"]}